~~
~~  Copyright 2014-2015 Université Paris Ouest and Sorbonne Universités, Univ. Paris 06 - CNRS UMR 7606 (LIP6)
~~
~~  All rights reserved.   This program and the accompanying materials
~~  are made available under the terms of the Eclipse Public License v1.0
~~  which accompanies this distribution, and is available at
~~  http://www.eclipse.org/legal/epl-v10.html
~~
~~  Project leader / Initial Contributor:
~~    Lom Messan Hillah - <lom-messan.hillah@lip6.fr>
~~
~~  Contributors:
~~    ${ocontributors} - <$oemails}>
~~
~~  Mailing list:
~~    lom-messan.hillah@lip6.fr
~~

 -------
Usage Information
 -------
 -------
2015-01
 -------

Overview

  This tool expects a set of paths to PNML files or to directories as arguments, where to find the PNML files.
  It will recursively scan directories and their sub-directories, looking for PNML files.
  
  You may provide a mix of paths to PNML files and directories containing them.
  
===

Basic command-line invocation
  
  The basic command-line invocation is the following (update the name of the jar to the latest version of this tool):
  
 <java -jar fr.lip6.move.pnml2nupn-latest-version.jar pathToPNMLFile [pathToFolder pathToAnotherPNMLFile ...]>

===

Advanced command-line invocation

 Advanced invocation includes arguments for the JVM (tested on Mac OS 10.9):
 
 <java -d64 -server -Xmx2g -Xmn128m -XX:NewSize=2g -XX:MaxNewSize=2g -XX:+UseNUMA -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -jar fr.lip6.move.pnml2nupn-latest-version.jar pathToFile [pathToFolder pathToAnotherFile ...]>
 
 In particular, increase the value of <-Xmx> argument which allocates max memory to the heap,
 when you are dealing with very large input files. In the above invocation, it is set to 2 GB.
 
===
 
Invocation using a Shell script

  We provide a {{{./download/pnml2nupn.sh}Shell script}} to help you increase productivity in using PNML to NuPN Converter.
In particular, the above set of arguments for the Java VM is included, that you can start with and modify to your system's settings.

  For instance, the -Xmx argument allocates some max amount of memory to the heap. If you mostly deal with small
PNML documents (a few hundreds KB), we advise you decrease it (current setting is 2 GB). If you use large documents,
(a few hundreds MB to GB), then you should increase it in order to avoid out of memory errors.

 The Shell script also contains some properties and an environment variable for the tool, that you can enable or disable. See below.
 
 Up to v1.2.2 of this tool, use the following {{{./download/pnml2bpn.sh}Shell script}} instead.

===

Output

 Upon successful execution, this tool will output 3 files:
 
  * A <<*.nupn>> file that contains the Basic Petri Net obtained from the PNML P/T translation;
  
  * A <<*.places>> file that contains the mapping between the places ids from PNML and their counterparts in NUPN;
  
  * A <<*.trans>> file that contains the mapping between the transitions ids from PNML and their counterparts in NUPN.
  
* Optional Output
  
  * A <<*.unsafe.arcs>> file is optionally generated, that contains the list of unsafe arcs (one per line) 
  in the original Petri Net (from PNML) and their respective inscriptions, in the form:
  
   <sourceNodeId arcId targetNodeId #inscription>. 
   
  The ids come from the PNML file. This file will be created only if:
  
   * Option <<has.unsafe.arcs>> is activated. In this case, <only> the <<*.unsafe.arcs>> file will be output;
   
   * options <<generate.unsafe>> AND <<remove.unsafe.trans>> are activated (see below)
  and at least an unsafe transition was removed. This behaviour is supported up to v1.2.2 of this tool.

 <<Note:>> All the output files will be located near the input PNML one.

===

Debug information

  In case of error, you may want the program to print the stack trace, to provide the tool author
  with useful information for debugging. To enable debug information, set the PNML2NUPN_DEBUG environment variable to true
  before invoking this tool.
  
* Supporting versions

  Since v1.3.0.

  Up to v1.2.2, use the PNML2BPN_DEBUG environment variable instead.
  
===

Options

 This tool supports some options (technically speaking: properties) that you might activate to change its behaviour.

* Force NUPN Generation
 
 You can force the generation of the NuPN file, even if the net is not 1-safe (as checked by the Bounds tool).
 To trigger that behaviour, invoke the tool with the <<force.nupn.generation>> property set to true, like so: 
 
 <java -Dforce.nupn.generation=true ...>

 The default value for this option is <false>. It works in pair with bounds checking (see next section).
 
** Supporting versions

  Since v1.1.9.
  
  Up to v1.2.2, use the <<force.bpn.generation>> instead.
 
* Disable Bounds Checking

 It is also possible to disable bounds checking on the net. Bounds checking enables this tool
 to determine if the input net is 1-safe or not. If disabled, NUPN generation will be
 faster since this step, that can take a long time, is skipped. You may set this tool into
 that mode by invoking it with the <<bounds.checking>> property set to false, like so:
 
 <java -Dbounds.checking=false ...>

 The default value for this option is <true>. If not unset, it has precedence over all the other options.

** Supporting versions

  Since v1.1.10.

* Check for the Presence of Unsafe Arcs in the Net

 It is possible to check for the presence of unsafe arcs (i.e inscription > 1) of the input P/T net to this tool.
This behaviour is triggered by the <<has.unsafe.arcs>> property, that is exclusive of all the others. Therefore,
if you set this property to true, the tool will only check for the presence of unsafe arcs, reports them in 
a <<*.unsafe.arcs>> file, and ignore the other properties, whatever their values.
  
 To activate this behaviour, set the <<has.unsafe.arcs>> property like so:
 
   <java -Dhas.unsafe.arcs=true ...>
   
 The default value for this option is false.
 
** Supporting versions

  Since v1.2.2.


* Force Generation of Unsafe Nets

 When it is known that the marking of some initial places or the inscription of some arcs have
 a valuation greater than 1, the translation is cancelled.  If you want it to happen despite this fact,
 invoke PNML to NUPN Converter with the <<generate.unsafe>> property like so:
 
  <java -Dgenerate.unsafe=true ...> 

  The default value for this option is <false>.
  
  This option does not work in pair with the <<force.bpn.generation>> option above. Setting the latter does not
  have any effect on this one. If bounds checking is enabled, setting this one will remain ineffective.
 
** Supporting versions

  From v1.2.0 to v1.2.2.
 
* Remove Transitions Connected to Unsafe Arcs

 When the inscriptions of some arcs have a valuation greater than 1, you may want to remove the transitions
 that are connected to them, and those arcs by the same opportunity. In this case, use the <<remove.unsafe.trans>> property, like so:
 
 <java -Dremove.unsafe.trans=true ...>
 
 The default value for this option is false.
 
 <<Note>> that if this operation eventually yields dead places, they are not removed. The implementation of removing dead places
 is not planned in the near future. If you are interested, you may want to create a fork of this project to implement that feature
 and then share it with all users. 
 
** Supporting versions

  From v1.2.0 to v1.2.2.
 
===

Table of Contents

%{toc|section=0|fromDepth=1|toDepth=3}

 